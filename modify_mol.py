import os
import sys
import pyframe

filename = sys.argv[1]

# Here we modify the .mol file to an ATOMBASIS description:
def transform_file_content(original_mol_file, new_mol_file, \
                           new_basis_set_core):

    # Read the original file content:
    with open(original_mol_file, 'r') as file:
        lines = file.readlines()

    # Initialize a variable to track whether the last hydrogen atom has been found:
    found_last_hydrogen = False

    print (len(lines))
    # Start transforming lines from the back to find the last hydrogen atom:
    for i in range(len(lines) - 1, -1, -1):
        if 'H     ' in lines[i] and not found_last_hydrogen:

            # Modify the line of the last hydrogen atom,
            # Ensure we keep the coords unchanged:
            lines[i] = lines[i].rstrip() + '\n'

            # Prepend the specific charge line for the last hydrogen-link atom, to be STO-3G:
            lines[i] = f"Charge=1.0 Atoms=1 Basis=STO-3G\n{lines[i]}"

            # Set the flag after finding the last H
            found_last_hydrogen = True

        elif 'Atoms=' in lines[i]:
            # Modify all other atom lines:
            lines[i] = lines[i].rstrip() + f" Basis={new_basis_set_core}\n"

    # Chaning the second-to-last H block and do Atoms-1 
    Hs = [(indx,i) for indx,i in enumerate(lines) if "Charge=1.0" in i.split()]
    parts = Hs[-2][1].split()[1].split("=")
    new_number = int(parts[1]) - 1
    lines[Hs[-2][0]] = f"Charge=1.0 Atoms={new_number} Basis={new_basis_set_core}\n"


    # Transform the content
    new_content = [
        "ATOMBASIS\n",
        f"Core (at {new_basis_set_core}) and the H-link (at STO-3G) and ECPs on MM atoms at 6 Ang from core\n",
        "Generated by PyFraMe and ATOMBASIS modified mol file with script\n",
        lines[4]]

    # Add the rest of the transformed lines
    new_content.extend(lines[5:])

    # Save the transformed content to a new file
    with open(new_mol_file, 'w') as new_file:
        new_file.writelines(new_content)

# Specify the original and new file paths
original_mol_file = f"{filename}.mol"
new_mol_file = f"{filename}_transformed.mol"
new_basis_set_core = "aug-pcseg-1"


# Transform the file content and save it to a new file
transform_file_content(original_mol_file, new_mol_file, \
                       new_basis_set_core)


# Now we can append the ECPs part:
system = pyframe.MolecularSystem(input_file=f"../{filename}.pqr", bond_threshold=0.20)

# QM region split:
system.split_fragment_by_identifier(identifier='472_LYR', new_names=['LYS', 'RET'],
fragment_definitions=[['N', 'HN', 'HA', 'C', 'O', 'CA'],
['CB', 'HB2', 'HB3', 'CG', 'HG2', 'HG3', 'CD', 'HD2', 'HD3',
 'CE', 'HE2', 'HE3', 'NZ', 'HZ1', 'C1', 'H11', 'C2', 'HC2', 'C3', 'C4',
 'H41', 'H42', 'H43', 'C5', 'H5', 'C6', 'H6', 'C7', 'H7', 'C80', 'C8', 'H81',
 'H82', 'H83', 'C9', 'H9', 'C10', 'H10', 'C11', 'C12', 'C13', 'H131',
 'H132', 'H133', 'C14', 'H141', 'H142', 'C15', 'H151', 'H152',
 'C16', 'H161', 'H162', 'C17', 'C18', 'H181', 'H182', 'H183', 'C19',
 'H191', 'H192', 'H193']])

core = system.get_fragments_by_identifier(identifiers=['472_RET'])

# Lipids split:
system.split_fragment_by_name(
    name='POPC',
    new_names=['POCH', 'POCO', 'POCP'],
    fragment_definitions=[['N', 'C13', 'H13A', 'H13B', 'H13C', 'C14', 'H14A', 'H14B', 'H14C', 'C15', 'H15A', 'H15B',
                           'H15C', 'C12', 'H12A', 'H12B', 'C11', 'H11A', 'H11B', 'P', 'O11', 'O12', 'O13', 'O14',
                           'C1', 'HA', 'HB', 'C2', 'HS', 'O21', 'C21', 'O22', 'C3', 'HX', 'HY', 'O31', 'C31', 'O32'
                          ],
                          [
                              'C22', 'H2R', 'H2S', 'C23', 'H3R', 'H3S', 'C24', 'H4R', 'H4S', 'C25', 'H5R', 'H5S',
                              'C26', 'H6R', 'H6S', 'C27', 'H7R', 'H7S', 'C28', 'H8R', 'H8S', 'C29', 'H91', 'C210',
                              'H101', 'C211', 'H11R', 'H11S', 'C212', 'H12R', 'H12S', 'C213', 'H13R', 'H13S',
                              'C214', 'H14R', 'H14S', 'C215', 'H15R', 'H15S', 'C216', 'H16R', 'H16S', 'C217',
                              'H17R', 'H17S', 'C218', 'H18R', 'H18S', 'H18T'
                          ],
                          [
                              'C32', 'H2X', 'H2Y', 'C33', 'H3X', 'H3Y', 'C34', 'H4X', 'H4Y', 'C35', 'H5X', 'H5Y',
                              'C36', 'H6X', 'H6Y', 'C37', 'H7X', 'H7Y', 'C38', 'H8X', 'H8Y', 'C39', 'H9X', 'H9Y',
                              'C310', 'H10X', 'H10Y', 'C311', 'H11X', 'H11Y', 'C312', 'H12X', 'H12Y', 'C313',
                              'H13X', 'H13Y', 'C314', 'H14X', 'H14Y', 'C315', 'H15X', 'H15Y', 'C316', 'H16X',
                              'H16Y', 'H16Z'
                          ]])


lipid = system.get_fragments_by_name(names=['POCH', 'POCO', 'POCP'])

close_fragments = system.get_fragments_by_distance(distance=6.0,
    reference=core,
    use_center_of_mass=False,
    protect_molecules=False)

# Initialize dictionaries to store coordinates by atom type
all_atoms = {
    'N': [],
    'O': [],
    'H': [],
    'C': [],
    'S': []
}

# Collect all atoms from all fragments
for fragment in close_fragments.values():

    #  Special case: we want to skip CA from 472_LYS, and not place a PP in that atom:
    if fragment.identifier == "472_LYS":
        fragment_elements = [atom.element for atom in fragment.atoms if atom.name != "CA"]
        fragment_coordinates = [atom.coordinate for atom in fragment.atoms if atom.name != "CA"]

    else:
        fragment_elements = [atom.element for atom in fragment.atoms]
        fragment_coordinates = [atom.coordinate for atom in fragment.atoms]

    # Group coordinates by atom type
    for element, coordinates in zip(fragment_elements, fragment_coordinates):
        if element in all_atoms:
            all_atoms[element].append(coordinates)

# Now, write grouped atom data to file
with open(new_mol_file, "a") as file:
    # Order the elements by their usual presentation order
    for element in ['C', 'O', 'H', 'S', 'N']:
        atoms = all_atoms[element]
        if atoms:  # Only proceed if there are atoms of this type
            element_charge = {'C': 6.0, 'O': 8.0, 'H': 1.0, 'S': 16.0, 'N': 7.0}[element]
            print(f"Charge={element_charge} Atoms={len(atoms)} Basis=pointcharge ECP=pe_pp", file=file)
            for coords in atoms:
                print(f"{element}     {coords[0]:.6f}    {coords[1]:.6f}    {coords[2]:.6f}", file=file)


# Now we count AtomTypes and modify that number in the header:
def update_atom_types_count(new_mol_file):
    with open(new_mol_file, 'r') as file:
        lines = file.readlines()

    # Count the occurrences of "Atoms="
    atoms_count = sum("Atoms=" in line for line in lines)

    # Update the "AtomTypes=" line with the new count:
    updated_lines = []
    for line in lines:
        if line.startswith("AtomTypes="):
            updated_lines.append(f"AtomTypes={atoms_count} " + ' '.join(line.split()[1:]) + "\n")
        else:
            updated_lines.append(line)

    # Save the updated content back to the file or a new file:
    with open(new_mol_file, 'w') as file:
        file.writelines(updated_lines)

update_atom_types_count(new_mol_file)

